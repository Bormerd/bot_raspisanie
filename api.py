# API –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Å—Ç—Ä–æ–º—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–µ—Ö–∞

import asyncio
from typing import Iterable, List
from datetime import date as Date
from datetime import datetime as DT
from contextlib import asynccontextmanager
from pydantic import BaseModel
from typing import Dict, Optional
from fastapi import FastAPI, HTTPException
from collections import defaultdict
import datetime
from core import models
from core.models import DB, Discipline, Lesson, Schedule, Group, Auditory
from core.parser import google
from bot_notifier import BotNotifier
from core.service import get_request


class ScheduleNotifier:
    @staticmethod
    async def get_user_info(chat_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = await models.User.aio_get_or_none(chat_id=chat_id)
        if not user:
            return None

        student = await models.Student.aio_get_or_none(user_id=user)
        if student:
            return {
                'chat_id': chat_id,
                'type': 'student',
                'id': student.group_id
            }

        teacher = await models.Teacher.aio_get_or_none(user_id=user)
        if teacher:
            disciplines = await models.Teacher.aio_filter(user_id=user)
            discipline_list = [t.discipline_id.id for t in disciplines]
            return {
                'chat_id': chat_id,
                'type': 'teacher',
                'id': discipline_list
            }
        
        return None

    @staticmethod
    async def format_teacher_schedule(schedule_data: List[Dict], schedule_date: Date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
        message_text = (
            f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_date}\n\n"
            f"üìÖ <b>{schedule_date}:</b>\n\n"
        )
        
        lessons_by_pair = defaultdict(list)
        for lesson in schedule_data:
            lessons_by_pair[lesson['pair']].append(lesson)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
        for pair in sorted(lessons_by_pair.keys()):
            lessons = lessons_by_pair[pair]
            message_text += f"{pair}Ô∏è‚É£ üìñ <b>{lessons[0]['discipline_name']}</b>\n"
            
            for lesson in lessons:
                message_text += (
                    f"   üë• –ì—Ä—É–ø–ø–∞: {lesson['group_name']}\n"
                    f"   üö™ –ê—É–¥.: {lesson['auditory_name']}\n"
                )
            
            message_text += "\n"
        
        if not lessons_by_pair:
            message_text += "üéâ <i>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</i>"
        
        return message_text

    @staticmethod
    async def format_student_schedule(schedule_data: List[Dict], schedule_date: Date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
        message_text = (
            f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_date}\n\n"
            f"üìÖ <b>{schedule_date}:</b>\n\n"
        )
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–∞—Ä–µ
        sorted_lessons = sorted(schedule_data, key=lambda x: x['pair'])
        
        for lesson in sorted_lessons:
            message_text += (
                f"{lesson['pair']}Ô∏è‚É£ üìñ <b>{lesson['discipline_name']}</b>\n"
                f"   üö™ –ê—É–¥.: {lesson['auditory_name']}\n\n"
            )
        
        if not sorted_lessons:
            message_text += "üéâ <i>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</i>"
        
        return message_text

    @staticmethod
    async def get_full_day_schedule(schedule_date: Date, user_info: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_info['type'] == 'student':
            # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –≥—Ä—É–ø–ø—ã
            schedule_response = await get_request(
                f'/schedule/date/{schedule_date}/?group_id={user_info["id"]}'
            )
            
            if not schedule_response or not schedule_response.get('entities'):
                return None
                
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            schedule_data = [{
                'pair': lesson['pair'],
                'discipline_name': lesson['discipline']['name'],
                'auditory_name': lesson['auditory']['name']
            } for lesson in schedule_response['entities']]
            
            return await ScheduleNotifier.format_student_schedule(schedule_data, schedule_date)
            
        else:
            # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º
            schedule_response = await get_request(
                f'/schedule/teacher/{user_info["chat_id"]}/'
            )
            
            if not schedule_response:
                return None
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            schedule_data = []
            for item in schedule_response:
                if item['date'] == str(schedule_date):
                    schedule_data.append({
                        'pair': item['pair'],
                        'discipline_name': item['discipline_name'],
                        'group_name': item['group_name'],
                        'auditory_name': item['auditory_name']
                    })
            
            return await ScheduleNotifier.format_teacher_schedule(schedule_data, schedule_date)

    @staticmethod
    async def send_schedule_update(chat_id: int, schedule_date: Date):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_info = await ScheduleNotifier.get_user_info(chat_id)
        if not user_info:
            return

        schedule_text = await ScheduleNotifier.get_full_day_schedule(schedule_date, user_info)
        if not schedule_text:
            schedule_text = (
                f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {schedule_date}\n\n"
                "üéâ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!"
            )
        
        await BotNotifier.send_message(chat_id, schedule_text)
        
async def check_schedule_changes(last_check_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    print(f"–ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ {last_check_time}")
    
    changed_schedules = await models.Schedule.aio_filter(
        update_at__gte=last_check_time
    ).prefetch(
        models.Lesson,
        models.Lesson.group,
        models.Lesson.discipline,
        models.Lesson.auditory
    )
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(changed_schedules)}")
    
    affected_users = set()
    
    for schedule in changed_schedules:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule.date} (ID: {schedule.id})")
        
        for lesson in schedule.lessons:
            # –°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã
            students = await models.Student.aio_filter(group_id=lesson.group_id)
            for student in students:
                user = await student.user_id
                affected_users.add((user.chat_id, schedule.date))
                print(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç {user.chat_id}")
            
            # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
            teachers = await models.Teacher.aio_filter(discipline_id=lesson.discipline_id)
            for teacher in teachers:
                user = await teacher.user_id
                affected_users.add((user.chat_id, schedule.date))
                print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {user.chat_id}")
    
    print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(affected_users)}")
    return affected_users

TIME_SHORT_SLEEP = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (8:00-17:00)
TIME_LONG_SLEEP = 60 * 60    # 1 —á–∞—Å –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

async def parsing_schedule():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    last_parsed_time = datetime.now()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    while True:
        try:
            print("\n=== –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ===")
            print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            await google.run()
            
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ {last_parsed_time}")
            affected_users = await check_schedule_changes(last_parsed_time)
            
            if affected_users:
                print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {len(affected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                for chat_id, schedule_date in affected_users:
                    try:
                        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}...")
                        user_info = await ScheduleNotifier.get_user_info(chat_id)
                        if not user_info:
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                            
                        schedule_text = await ScheduleNotifier.get_full_day_schedule(schedule_date, user_info)
                        if schedule_text:
                            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {chat_id}")
                            await BotNotifier.send_message(chat_id, schedule_text)
                        else:
                            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
                            
                        await asyncio.sleep(0.1)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {str(e)}")
            else:
                print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            last_parsed_time = datetime.now()
            print(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_parsed_time}")
            
            now = datetime.now().time()
            sleep_time = TIME_SHORT_SLEEP if 8 <= now.hour < 17 else TIME_LONG_SLEEP
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ({sleep_time} —Å–µ–∫)...")
            await asyncio.sleep(sleep_time)
            
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            import traceback
            traceback.print_exc()
            await asyncio.sleep(60)
        
class CreateUserType(BaseModel):
    chat_id: int
    type: str


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    task = asyncio.create_task(parsing_schedule())
    
    def handle_exception(loop, context):
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ event loop: {context}")
    
    loop = asyncio.get_event_loop()
    loop.set_exception_handler(handle_exception)
    
    yield
    
    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    if not DB.is_closed():
        DB.close()

app = FastAPI(lifespan=lifespan)

@app.get('/user/{chat_id}/')
async def get_user_role(chat_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await models.User.aio_get_or_none(chat_id=chat_id)
    student = await models.Student.aio_get_or_none(user_id=user)
    if student:
        return {
            'chat_id': user.chat_id,
            'type': 'student',
            'id': student.group_id
        }

    teacher = await models.Teacher.aio_get_or_none(user_id=user)
    if teacher:
        disciplines = models.Teacher.select().where(models.Teacher.user_id == user.id).prefetch(models.Discipline)
        discipline_list = []
        for teacher_discipline in disciplines:
            discipline_list.append(teacher_discipline.discipline_id.id)

        return {
            'chat_id': user.chat_id,
            'type': 'teacher',
            'id': discipline_list
        }
        
@app.post('/create/{chat_id}')
async def create_user(chat_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await models.User.aio_get_or_create(chat_id=chat_id)
    return {'message': 'OK'}

@app.post('/create/teacher/')
async def create_teacher(response: CreateUserType):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"""
    try:
        user, _ = await models.User.aio_get_or_create(chat_id=response.chat_id)
        discipline, _ = await models.Discipline.aio_get_or_create(name=response.type)
        await models.Teacher.aio_get_or_create(user_id=user, discipline_id=discipline)
        return {'message': 'OK'}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post('/create/student/')
async def create_student(response: CreateUserType):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    try:
        user, _ = await models.User.aio_get_or_create(chat_id=response.chat_id)
        group, _ = await models.Group.aio_get_or_create(name=response.type)
        await models.Student.aio_get_or_create(user_id=user, group_id=group)
        return {'message': 'OK'}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.put('/updates/group/')
async def update_student(response: CreateUserType):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        student_id (int): ID —Å—Ç—É–¥–µ–Ω—Ç–∞.
        group_id (int): ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.

    Raises:
        HTTPException: 404, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
        HTTPException: 404, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        HTTPException: 400, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.

    Returns:
        dict: OK.
    """
    try:
        user = await models.User.aio_get_or_none(chat_id=response.chat_id)
        student = await models.Student.aio_get_or_none(user_id = user)
        if not student:
            raise HTTPException(status_code=404, detail="–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        group = await models.Group.aio_get_or_none(name=response.type)
        if not group:
            raise HTTPException(status_code=404, detail="–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        student.group_id = group.id
        await student.aio_save()

        return {'message': 'OK'}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
@app.delete('/teachet/discipline/{discipline_id}')
async def delete_discipline(discipline_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.
    """
    discipline = await models.Teacher.aio_get_or_none(discipline_id=discipline_id)
    if not discipline:
        raise HTTPException(status_code=400, detail=str(e))
    await discipline.aio_delete_instance()
    return {'message': 'OK'}

@app.delete('/teacher/delete/{teacher_id}')
async def delete_teacher(teacher_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

    Args:
        teacher_id (int): [teacher -> user]

    Raises:
        HTTPException: [400]

    Returns:
        [message]: [OK(200)]
    """
    user = await models.User.aio_get_or_none(chat_id=teacher_id)
    teacher = await models.Teacher.aio_get_or_none(user_id=user)
    if not teacher:
        raise HTTPException(status_code=404, detail="–°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    while True:
        teacher = await models.Teacher.aio_get_or_none(user_id=user)
        if not teacher:
            break
        await teacher.aio_delete_instance()
    return {'message': 'OK'}

@app.delete('/student/delete/{student_id}')
async def delete_student(student_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞

    Args:
        student_id (int): [student -> user]

    Raises:
        HTTPException: [400]

    Returns:
        [message]: [OK(200)]
    """
    user = await models.User.aio_get_or_none(chat_id=student_id)
    student = await models.Student.aio_get_or_none(user_id=user)
    if not student:
        raise HTTPException(status_code=404, detail="–°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await student.aio_delete_instance()
    return {'message': 'OK'}

@app.get('/updates/')
async def get_updates(discipline_id: int = None, group_id: int = None, limit: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π"""
    where = models.Schedule.date >= Date.today()
    where &= models.Lesson.arhiv == False
    if discipline_id:
        where &= models.Lesson.discipline_id == discipline_id
    if group_id:
        where &= models.Lesson.group_id == group_id

    lessons: List[models.Lesson] = await DB.aio_execute(
        models.Lesson
        .select(models.Lesson)
        .join(models.Schedule, on=(models.Schedule.id == models.Lesson.schedule_id))
        .where(where)
        .order_by(models.Lesson.id.desc())
        .limit(limit)
    )
    return {
        'count': len(lessons),
        'entities': [lesson.to_dict() for lesson in lessons]
    }

@app.get('/schedules/')
async def get_schedules(date: Date = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    if date:
        schedules = await DB.aio_execute(
            models.Schedule.filter(date=date)
            .order_by(models.Schedule.date.asc(), models.Schedule.update_at.asc())
        )
    else:
        schedules = await DB.aio_execute(
            models.Schedule.select()
            .order_by(models.Schedule.date.asc(), models.Schedule.update_at.asc())
        )

    return {
        'count': len(schedules),
        'entities': [schedule.to_dict() for schedule in schedules]
    }

async def get_dict_by_schedule(schedule: models.Schedule, group: models.Group = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    if not schedule:
        raise HTTPException(status_code=404, detail="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    lessons: Iterable[models.Lesson] = await DB.aio_execute(schedule.lessons)

    result = {
        'count': 0,
        'entities': [],
    }

    for lesson in lessons:
        if group and lesson.group != group:
            continue

        row = {
            'group': lesson.group.to_dict(),
            'pair': lesson.pair,
            'discipline': lesson.discipline.to_dict(),
            'auditory': lesson.auditory.to_dict(),
        }
        result['entities'].append(row)

    result['count'] = len(result['entities'])
    return result

@app.get('/schedule/{schedule_id}/')
async def get_schedule(schedule_id: int, group_id: int = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ"""
    schedule = await models.Schedule.aio_get(id=schedule_id)
    group = await models.Group.aio_get(id=group_id) if group_id else None
    return await get_dict_by_schedule(schedule=schedule, group=group)

@app.get('/schedule/date/{date}/')
async def get_schedule_by_date(date: Date, group_id: int = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ"""
    schedule = await models.Schedule.aio_get_or_none(date=date)
    if not schedule:
        raise HTTPException(status_code=404, detail="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    group = await models.Group.aio_get(id=group_id) if group_id else None
    return await get_dict_by_schedule(schedule=schedule, group=group)

@app.get("/schedule/teacher/{teacher_id}")
async def get_teacher_schedule(teacher_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    disciplines = await Discipline.aio_filter(teacher__user_id=teacher_id)
    if not disciplines:
        raise HTTPException(status_code=404, detail="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")

    lessons = await Lesson.aio_filter(discipline__in=[d.id for d in disciplines], arhiv=False)

    response = []
    for lesson in lessons:
        schedule = await Schedule.aio_get(id=lesson.schedule_id)
        group = await Group.aio_get(id=lesson.group_id)
        auditory = await Auditory.aio_get(id=lesson.auditory_id)
        response.append({
            "date": schedule.date,
            "group_name": group.name,
            "pair": lesson.pair,
            "discipline_name": lesson.discipline.name,
            "auditory_name": auditory.name
        })

    return response

@app.get('/date/{id}')
async def get_date_doc(id: int):
    """–ü–æ –∞–π–¥–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É"""
    date = await models.Schedule.aio_get(id=id)
    if not date:
        raise HTTPException(status_code=404, detail="–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return {'date': date.date}

@app.get('/groups/')
async def get_groups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"""
    groups = await DB.aio_execute(models.Group.select())
    return {
        'count': len(groups),
        'entities': [group.to_dict() for group in groups],
    }

@app.get('/group/{group_id}/')
async def get_group_by_id(group_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    group = await models.Group.aio_get(id=group_id)
    if not group:
        raise HTTPException(status_code=404, detail="–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    lessons = await DB.aio_execute(group.lessons.group_by(models.Lesson.schedule))
    return {
        **group.to_dict(),
        'schedules': {
            'count': len(lessons),
            'entities': [
                lesson.schedule.to_dict() for lesson in lessons
                if lesson.schedule.date >= Date.today()
            ]
        },
    }

@app.get('/disciplines/')
async def get_discipline():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω"""
    disciplines = await DB.aio_execute(models.Discipline.select())
    return {
        'count': len(disciplines),
        'entities': [discipline.to_dict() for discipline in disciplines],
    }

@app.get('/discipline/{discipline_id}/')
async def get_discipline_by_id(discipline_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"""
    discipline = await models.Discipline.aio_get(id=discipline_id)
    if not discipline:
        raise HTTPException(status_code=404, detail="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    lessons = await DB.aio_execute(discipline.lessons.group_by(models.Lesson.schedule))
    return {
        **discipline.to_dict(),
        'schedules': {
            'count': len(lessons),
            'entities': [
                lesson.schedule.to_dict() for lesson in lessons
                if lesson.schedule.date >= Date.today()
            ]
        },
    }
    
@app.get('/schedules/')
async def get_schedules(date: Date = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ï—Å–ª–∏ date - –Ω–µ —É–∫–∞–∑–∞–Ω,
 —Ç–æ –≤–µ—Ä–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –ø–æ–∑–∂–µ"""
    if date:
        schedules = await DB.aio_execute(
            models.Schedule
            .filter(
                date=date
            )
            .order_by(
                models.Schedule.date.asc(),
                models.Schedule.update_at.asc(),
            )
        )
    else:
        schedules = await DB.aio_execute(
            models.Schedule.select().where(
                models.Schedule.date >= Date.today()
            )
            .order_by(
                models.Schedule.date.asc(),
                models.Schedule.update_at.asc(),
            )
        )

    return {
        'count': len(schedules),
        'entities': [schedule.to_dict() for schedule in schedules]
    }


async def get_dict_by_schedule(
        schedule: models.Schedule,
        group: models.Group = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""

    lessons: Iterable[models.Lesson] = await DB.aio_execute(schedule.lessons)

    result = {
        'count': 0,
        'entities': [],
    }

    for lesson in lessons:
        if group and lesson.group != group:
            continue

        row = {
            'group': lesson.group.to_dict(),
            'pair': lesson.pair,
            'discipline': lesson.discipline.to_dict(),
            'auditory': lesson.auditory.to_dict(),
        }
        result['entities'].append(row)

    result['count'] = len(result['entities'])
    return result


@app.get('/schedule/{schedule_id}/')
async def get_schedule(schedule_id: int, group_id: int = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ

    Args:
        schedule_id (int): [–Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã]
        group_id (int, optional): [–≥—Ä—É–ø–ø–∞]. Defaults to None.

    Returns:
        [JSON]: [shedule,group]
    """
    schedule = await models.Schedule.aio_get(id=schedule_id)
    group = await models.Group.aio_get(id=group_id) if group_id else None
    return await get_dict_by_schedule(
        schedule=schedule,
        group=group
    )
