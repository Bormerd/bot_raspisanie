"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è"""
# –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –±–∏–±–ª–µ–æ—Ç–µ–∫
from peewee import IntegrityError
from aiogram import Bot
from aiogram.types import Message,CallbackQuery,BotCommand
from aiogram.fsm.context import FSMContext
import bot.keys_board.teacher as tea
import bot.state.state as stat
from api.RequestsUrl import service
from collections import defaultdict

async def menu_teacher(message:Message,state:FSMContext,bot: Bot) -> None:
    """""
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é
    """
    await state.clear()
    await message.answer("–ú–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",reply_markup=tea.Teacher_menu)
    from main import bot
    commands = [
        BotCommand(command="/add_discipline", description="–¥–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"),
        BotCommand(command="/delete_discipline", description="—É–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"),
        BotCommand(command="/schedule",description="–†–∞—Å–ø–∏—Å–∞–Ω–µ–∏"),
        BotCommand(command="/menu", description="–ú–µ–Ω—é")
    ]
    await bot.set_my_commands(commands)

async def teacher_schedule(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    schedules_response = await service.get_request('/schedules/')
    schedules = schedules_response.get("entities", [])

    if not schedules:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teacher_response = await service.get_request(f'/user/{teacher_id}/')
    teacher_disciplines = teacher_response.get('id', [])
    discipline_ids = teacher_disciplines 
    if not discipline_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
        return

    for schedule in schedules:
        schedule_id = schedule.get("id")

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_details_response = await service.get_request(f'/schedule/{schedule_id}/')
        schedule_details = schedule_details_response.get("entities", [])
        lessons_by_date = defaultdict(list)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        for detail in schedule_details:
            if detail.get("discipline", {}).get("id") in discipline_ids:
                lessons_by_date[schedule['date']].append(detail)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for date, lessons in lessons_by_date.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
            lessons_sorted = sorted(lessons, key=lambda x: x.get("pair"))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"üìÖ <b>{date}:</b>\n\n"
    
    # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not lessons_sorted:
                message_text += "üéâ <i>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</i>"
            else:
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for lesson in lessons_sorted:
                    discipline = lesson.get("discipline", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    auditory = lesson.get("auditory", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    pair = lesson.get("pair", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    group = lesson.get("group", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
                    message_text += (
                        f"{pair}Ô∏è‚É£ üìñ <b>{discipline}</b> | üö™ <b>{auditory}</b>\n"
                    )
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—ã)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await message.answer(message_text, parse_mode="HTML")

async def add_disciplines (message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."""
    keyboard = await tea.discipline()
    if keyboard:
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", reply_markup=keyboard)
        await state.set_state(stat.User.add_discipline)
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–∞–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ—Ç.")

async def add_discipline_user(callbak: CallbackQuery):
    await callbak.message.delete()
    response = callbak.data.split('_')
    if response[0] == 'disciplines':
        await service.post_request('/create/teacher/', json={
            'chat_id': callbak.message.chat.id,
            'type': response[1]
        })
    await callbak.message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

async def delete_discipline(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."""
    chat_id = message.from_user.id
    keyboard,count = await tea.user_discipline(chat_id)
    if count != 1:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=keyboard)
        await state.set_state(stat.User.delete_discipline)
    else:
        await message.answer("–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ 1 –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.")

async def delete_discipline_user(callbak:CallbackQuery):
    await callbak.message.delete()
    response = callbak.data.split('_')
    await service.delete_request(f'/teachet/discipline/{response[1]}')
    await callbak.message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞")
    